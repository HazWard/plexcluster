// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plexcluster/plexcluster.proto

package plexcluster

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_SCHEDULED Status = 0
	Status_ERROR     Status = 1
)

var Status_name = map[int32]string{
	0: "SCHEDULED",
	1: "ERROR",
}

var Status_value = map[string]int32{
	"SCHEDULED": 0,
	"ERROR":     1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_275d149a28ea9975, []int{0}
}

// JobRequest describes a transcoding job to be performed by a worker
type JobRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Args                 []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Expiry               int64    `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Env                  []string `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobRequest) Reset()         { *m = JobRequest{} }
func (m *JobRequest) String() string { return proto.CompactTextString(m) }
func (*JobRequest) ProtoMessage()    {}
func (*JobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_275d149a28ea9975, []int{0}
}

func (m *JobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobRequest.Unmarshal(m, b)
}
func (m *JobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobRequest.Marshal(b, m, deterministic)
}
func (m *JobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobRequest.Merge(m, src)
}
func (m *JobRequest) XXX_Size() int {
	return xxx_messageInfo_JobRequest.Size(m)
}
func (m *JobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobRequest proto.InternalMessageInfo

func (m *JobRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JobRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *JobRequest) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *JobRequest) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

// JobStatus describes whether the transcoding task was completed
type JobStatus struct {
	JobId                string   `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Status               Status   `protobuf:"varint,2,opt,name=status,proto3,enum=plexcluster.Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobStatus) Reset()         { *m = JobStatus{} }
func (m *JobStatus) String() string { return proto.CompactTextString(m) }
func (*JobStatus) ProtoMessage()    {}
func (*JobStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_275d149a28ea9975, []int{1}
}

func (m *JobStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobStatus.Unmarshal(m, b)
}
func (m *JobStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobStatus.Marshal(b, m, deterministic)
}
func (m *JobStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStatus.Merge(m, src)
}
func (m *JobStatus) XXX_Size() int {
	return xxx_messageInfo_JobStatus.Size(m)
}
func (m *JobStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStatus.DiscardUnknown(m)
}

var xxx_messageInfo_JobStatus proto.InternalMessageInfo

func (m *JobStatus) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobStatus) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_SCHEDULED
}

// WorkerStatus is tell the server what type of server
// is requesting jobs and what's its current load
type WorkerStatus struct {
	WorkerId             string   `protobuf:"bytes,1,opt,name=workerId,proto3" json:"workerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkerStatus) Reset()         { *m = WorkerStatus{} }
func (m *WorkerStatus) String() string { return proto.CompactTextString(m) }
func (*WorkerStatus) ProtoMessage()    {}
func (*WorkerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_275d149a28ea9975, []int{2}
}

func (m *WorkerStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkerStatus.Unmarshal(m, b)
}
func (m *WorkerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkerStatus.Marshal(b, m, deterministic)
}
func (m *WorkerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerStatus.Merge(m, src)
}
func (m *WorkerStatus) XXX_Size() int {
	return xxx_messageInfo_WorkerStatus.Size(m)
}
func (m *WorkerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerStatus proto.InternalMessageInfo

func (m *WorkerStatus) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func init() {
	proto.RegisterEnum("plexcluster.Status", Status_name, Status_value)
	proto.RegisterType((*JobRequest)(nil), "plexcluster.JobRequest")
	proto.RegisterType((*JobStatus)(nil), "plexcluster.JobStatus")
	proto.RegisterType((*WorkerStatus)(nil), "plexcluster.WorkerStatus")
}

func init() { proto.RegisterFile("plexcluster/plexcluster.proto", fileDescriptor_275d149a28ea9975) }

var fileDescriptor_275d149a28ea9975 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x5f, 0x4b, 0xc3, 0x30,
	0x14, 0xc5, 0x4d, 0xbb, 0x55, 0x73, 0xd5, 0x51, 0xaf, 0x32, 0x6b, 0x41, 0x28, 0x7d, 0x2a, 0x13,
	0xa6, 0xcc, 0x37, 0xdf, 0xc4, 0x15, 0xb4, 0x88, 0x42, 0xaa, 0x08, 0xbe, 0xf5, 0x4f, 0x90, 0xea,
	0x68, 0x6a, 0xd2, 0xce, 0xf9, 0x35, 0xfc, 0xc4, 0x62, 0x57, 0x6b, 0x27, 0xec, 0xed, 0x9c, 0xdc,
	0x93, 0x5f, 0x0e, 0xb9, 0x70, 0x5c, 0xcc, 0xf8, 0x22, 0x99, 0x55, 0xaa, 0xe4, 0xf2, 0xb4, 0xa3,
	0xc7, 0x85, 0x14, 0xa5, 0xc0, 0xed, 0xce, 0x91, 0xfb, 0x0c, 0x10, 0x88, 0x98, 0xf1, 0xf7, 0x8a,
	0xab, 0x12, 0x07, 0xa0, 0x65, 0xa9, 0x45, 0x1c, 0xe2, 0x51, 0xa6, 0x65, 0x29, 0x22, 0xf4, 0x22,
	0xf9, 0xa2, 0x2c, 0xcd, 0xd1, 0x3d, 0xca, 0x6a, 0x8d, 0x43, 0x30, 0xf8, 0xa2, 0xc8, 0xe4, 0xa7,
	0xa5, 0x3b, 0xc4, 0xd3, 0x59, 0xe3, 0xd0, 0x04, 0x9d, 0xe7, 0x73, 0xab, 0x57, 0x47, 0x7f, 0xa4,
	0x7b, 0x07, 0x34, 0x10, 0x71, 0x58, 0x46, 0x65, 0xa5, 0xf0, 0x00, 0xfa, 0xaf, 0x22, 0xbe, 0xf9,
	0xa5, 0x2f, 0x0d, 0x9e, 0x80, 0xa1, 0xea, 0xb9, 0xa5, 0x39, 0xc4, 0x1b, 0x4c, 0xf6, 0xc7, 0xdd,
	0xbe, 0xcb, 0xab, 0xac, 0x89, 0xb8, 0x23, 0xd8, 0x79, 0x12, 0xf2, 0x8d, 0xcb, 0x06, 0x69, 0xc3,
	0xd6, 0x47, 0xed, 0x5b, 0x6a, 0xeb, 0x47, 0x2e, 0x18, 0x4d, 0x6a, 0x17, 0x68, 0x78, 0x75, 0xed,
	0x4f, 0x1f, 0x6f, 0xfd, 0xa9, 0xb9, 0x81, 0x14, 0xfa, 0x3e, 0x63, 0xf7, 0xcc, 0x24, 0x93, 0x2f,
	0x02, 0x7b, 0x0f, 0x32, 0xca, 0x55, 0x22, 0x52, 0x2e, 0x43, 0x2e, 0xe7, 0x59, 0xc2, 0xf1, 0x02,
	0x36, 0x43, 0x9e, 0xa7, 0x81, 0x88, 0xf1, 0x70, 0xa5, 0xcd, 0xdf, 0x3f, 0xd9, 0xc3, 0xff, 0x83,
	0xe6, 0xad, 0x4b, 0xa0, 0x2d, 0x10, 0x8f, 0x56, 0x42, 0xdd, 0xe6, 0xf6, 0x3a, 0xf0, 0x19, 0x89,
	0x8d, 0x7a, 0x49, 0xe7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x01, 0xb7, 0x33, 0x03, 0xc5, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TranscoderServiceClient is the client API for TranscoderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TranscoderServiceClient interface {
	// SendJob submits a job  to be processed by a worker
	SendJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobStatus, error)
	// Transcode represents a worker subscribing to the master to receive jobs
	Transcode(ctx context.Context, in *WorkerStatus, opts ...grpc.CallOption) (TranscoderService_TranscodeClient, error)
}

type transcoderServiceClient struct {
	cc *grpc.ClientConn
}

func NewTranscoderServiceClient(cc *grpc.ClientConn) TranscoderServiceClient {
	return &transcoderServiceClient{cc}
}

func (c *transcoderServiceClient) SendJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/plexcluster.TranscoderService/SendJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcoderServiceClient) Transcode(ctx context.Context, in *WorkerStatus, opts ...grpc.CallOption) (TranscoderService_TranscodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TranscoderService_serviceDesc.Streams[0], "/plexcluster.TranscoderService/Transcode", opts...)
	if err != nil {
		return nil, err
	}
	x := &transcoderServiceTranscodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TranscoderService_TranscodeClient interface {
	Recv() (*JobRequest, error)
	grpc.ClientStream
}

type transcoderServiceTranscodeClient struct {
	grpc.ClientStream
}

func (x *transcoderServiceTranscodeClient) Recv() (*JobRequest, error) {
	m := new(JobRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TranscoderServiceServer is the server API for TranscoderService service.
type TranscoderServiceServer interface {
	// SendJob submits a job  to be processed by a worker
	SendJob(context.Context, *JobRequest) (*JobStatus, error)
	// Transcode represents a worker subscribing to the master to receive jobs
	Transcode(*WorkerStatus, TranscoderService_TranscodeServer) error
}

// UnimplementedTranscoderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTranscoderServiceServer struct {
}

func (*UnimplementedTranscoderServiceServer) SendJob(ctx context.Context, req *JobRequest) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendJob not implemented")
}
func (*UnimplementedTranscoderServiceServer) Transcode(req *WorkerStatus, srv TranscoderService_TranscodeServer) error {
	return status.Errorf(codes.Unimplemented, "method Transcode not implemented")
}

func RegisterTranscoderServiceServer(s *grpc.Server, srv TranscoderServiceServer) {
	s.RegisterService(&_TranscoderService_serviceDesc, srv)
}

func _TranscoderService_SendJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscoderServiceServer).SendJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plexcluster.TranscoderService/SendJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscoderServiceServer).SendJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscoderService_Transcode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkerStatus)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TranscoderServiceServer).Transcode(m, &transcoderServiceTranscodeServer{stream})
}

type TranscoderService_TranscodeServer interface {
	Send(*JobRequest) error
	grpc.ServerStream
}

type transcoderServiceTranscodeServer struct {
	grpc.ServerStream
}

func (x *transcoderServiceTranscodeServer) Send(m *JobRequest) error {
	return x.ServerStream.SendMsg(m)
}

var _TranscoderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plexcluster.TranscoderService",
	HandlerType: (*TranscoderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendJob",
			Handler:    _TranscoderService_SendJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transcode",
			Handler:       _TranscoderService_Transcode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plexcluster/plexcluster.proto",
}
